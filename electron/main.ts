import {app, dialog, BrowserWindow} from 'electron';
const fs = require('fs');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const {autoUpdater} = require('electron-updater');
autoUpdater.autoRunAppAfterInstall = true;

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 720,
        width: 1152,
        titleBarStyle: process.platform === 'darwin' ? 'hidden' : 'default',
        trafficLightPosition: {x: 16, y: 15},
        autoHideMenuBar: true
    });

    // and load the index.html of the app.
    // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.loadURL("http://schoolplanner.io/app");

    mainWindow.webContents.reloadIgnoringCache()

    const path = require('path');


    // Inject 'dom-ready' CSS into the page
    mainWindow.webContents.on('dom-ready', () => {
        const script: string = fs.readFileSync(
            path.join(path.join(app.getAppPath(), "/build/js"), "/dom-ready.js"),
            'utf8'
        );
        mainWindow.webContents.executeJavaScript(script);
    });

    /*
    mainWindow.webContents.on('dom-ready', () => {
        mainWindow.webContents.executeJavaScript(`
            const head = document.getElementsByTagName('head')[0];
            const styleSheet = document.createElement('style');
            styleSheet.innerText = "header:not(.open) {margin-left: 64px !important;} #nav-logo {margin-top: 24px !important;}";
            head.appendChild(styleSheet);
        `);
    });
     */
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow();
    autoUpdater.checkForUpdatesAndNotify();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

autoUpdater.on('update-downloaded', () => {
    dialog.showMessageBox({
        type: 'question',
        buttons: ['Install and Restart', 'Later'],
        defaultId: 0,
        message: 'A new update has been downloaded. Would you like to install and restart the app now?'
    }).then(selection => {
        if (selection.response === 0) {
            // User clicked 'Install and Restart'
            autoUpdater.quitAndInstall();
        }
    });
});